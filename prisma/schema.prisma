datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  imageUrl      String?
  publicId      String?
  bio           String          @default("Hey there! I'm using BlogSnap")
  twitter       String          @default("")
  facebook      String          @default("")
  instagram     String          @default("")
  linkedIn      String          @default("")
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  likes         Like[]
  comments      Comment[]
  saved         Saved[]
  following     Follow[]        @relation("follows")
  followers     Follow[]        @relation("followedBy")
  feedback      Feedback[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  FollowedBy   User?   @relation(name: "follows", fields: [followedById], references: [id])
  followedById String? @db.ObjectId

  Follows   User?   @relation(name: "followedBy", fields: [followsId], references: [id])
  followsId String? @db.ObjectId

  createdAt DateTime @default(now())
}

model Blog {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  topic     String
  imageUrl  String?
  publicId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  likes     Like[]
  comments  Comment[]
  saved     Saved[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?  @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model Saved {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?  @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  Blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?  @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Topic {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  topic String
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
